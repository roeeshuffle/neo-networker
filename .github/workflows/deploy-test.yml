name: Deploy to Test Environment
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 587842257084
  ECR_REPOSITORY: repo

jobs:
  deploy-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: test-${{ github.sha }}
      run: |
        # Build backend Docker image
        docker build -t neo-networker-backend -f Dockerfile .
        
        # Tag for test environment
        docker tag neo-networker-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:test
        docker tag neo-networker-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:test
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      env:
        VITE_API_URL: https://yycttgbpca.us-east-1.awsapprunner.com/api
      run: |
        cd frontend
        npm run build
    
    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://neo-networker-frontend-test --delete
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.TEST_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
    
    - name: Deploy backend to App Runner
      run: |
        # Check if App Runner service exists
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='neo-networker-backend-test'].ServiceArn" --output text)
        
        if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" = "None" ]; then
          echo "üöÄ Creating new App Runner service for test environment..."
          
          # Create the service
          aws apprunner create-service \
            --service-name neo-networker-backend-test \
            --source-configuration '{
              "CodeRepository": {
                "RepositoryUrl": "https://github.com/roeeshuffle/neo-networker",
                "SourceCodeVersion": {
                  "Type": "BRANCH",
                  "Value": "dev"
                },
                "CodeConfiguration": {
                  "ConfigurationSource": "API",
                  "CodeConfigurationValues": {
                    "Runtime": "PYTHON_3",
                    "BuildCommand": "pip install -r backend/requirements.txt",
                    "StartCommand": "python backend/app.py",
                    "Port": "5002",
                    "RuntimeEnvironmentVariables": {
                      "DATABASE_URL": "postgresql://postgres:'${{ secrets.TEST_DB_PASSWORD }}'@neo-networker-db-test.c0d2k4qwgenr.us-east-1.rds.amazonaws.com:5432/postgres",
                      "ENVIRONMENT": "test",
                      "FLASK_DEBUG": "True",
                      "FRONTEND_URL": "https://d2fq8k5py78ii.cloudfront.net",
                      "JWT_SECRET_KEY": "test-jwt-secret-key-for-testing-environment",
                      "ADMIN_EMAIL": "roee2912@gmail.com",
                      "GOOGLE_CLIENT_ID": "${{ secrets.GOOGLE_CLIENT_ID }}",
                      "GOOGLE_CLIENT_SECRET": "${{ secrets.GOOGLE_CLIENT_SECRET }}",
                      "GOOGLE_REDIRECT_URI": "https://d2fq8k5py78ii.cloudfront.net/auth/google/callback",
                      "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}",
                      "PORT": "5002",
                      "SECRET_KEY": "test-secret-key-for-testing-environment",
                      "TELEGRAM_BOT_TOKEN": "${{ secrets.TELEGRAM_BOT_TOKEN }}",
                      "WHATSAPP_ACCESS_TOKEN": "${{ secrets.WHATSAPP_ACCESS_TOKEN }}",
                      "WHATSAPP_APP_ID": "${{ secrets.WHATSAPP_APP_ID }}",
                      "WHATSAPP_APP_SECRET": "${{ secrets.WHATSAPP_APP_SECRET }}",
                      "WHATSAPP_BUSINESS_ACCOUNT_ID": "${{ secrets.WHATSAPP_BUSINESS_ACCOUNT_ID }}",
                      "WHATSAPP_PHONE_NUMBER_ID": "${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}",
                      "WHATSAPP_REFRESH_TOKEN": "${{ secrets.WHATSAPP_REFRESH_TOKEN }}",
                      "WHATSAPP_WEBHOOK_VERIFY_TOKEN": "${{ secrets.WHATSAPP_WEBHOOK_VERIFY_TOKEN }}"
                    }
                  }
                }
              },
              "AutoDeploymentsEnabled": false,
              "AuthenticationConfiguration": {
                "ConnectionArn": "arn:aws:apprunner:us-east-1:587842257084:connection/neo-networker-github/af81df6776b14fcaa53ada4c143541bc"
              }
            }' \
            --instance-configuration '{
              "Cpu": "1024",
              "Memory": "2048"
            }'
          
          echo "‚úÖ Test App Runner service created successfully"
          echo "‚è≥ Service is starting up..."
        else
          echo "üîç Checking service status..."
          SERVICE_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.Status' --output text)
          echo "Service status: $SERVICE_STATUS"
          
          if [ "$SERVICE_STATUS" = "RUNNING" ]; then
            echo "üöÄ Deploying to existing App Runner service..."
            aws apprunner start-deployment --service-arn $SERVICE_ARN
            echo "‚úÖ Backend deployed to App Runner"
          else
            echo "‚è≥ Service is not in RUNNING state ($SERVICE_STATUS). Skipping deployment."
            echo "‚ÑπÔ∏è  Service will be ready for deployment once it reaches RUNNING state."
          fi
        fi
    
    - name: Run database migrations
      run: |
        # Get RDS endpoint
        RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier neo-networker-db-test --query 'DBInstances[0].Endpoint.Address' --output text)
        
        # Install PostgreSQL client
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
        # Run migrations
        PGPASSWORD="${{ secrets.TEST_DB_PASSWORD }}" psql -h $RDS_ENDPOINT -U postgres -d postgres -f production_migration.sql
        PGPASSWORD="${{ secrets.TEST_DB_PASSWORD }}" psql -h $RDS_ENDPOINT -U postgres -d postgres -f google_scopes_migration.sql
    
    - name: Run tests
      run: |
        # Add your test commands here
        echo "Running tests..."
        # Example: npm test, pytest, etc.
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Successfully deployed to test environment"
        echo "üåê Test Frontend: https://neo-networker-frontend-test-cdn.cloudfront.net"
        echo "üîß Test Backend: https://neo-networker-backend-test.us-east-1.awsapprunner.com"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment to test environment failed"
        exit 1
