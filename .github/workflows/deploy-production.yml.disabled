name: Deploy to Production Environment
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 587842257084
  ECR_REPOSITORY: repo

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Confirm production deployment
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.confirm_production }}" != "DEPLOY" ]; then
          echo "‚ùå Production deployment cancelled. You must type 'DEPLOY' to confirm."
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        # Build backend Docker image
        docker build -t neo-networker-backend -f Dockerfile .
        
        # Tag for production environment
        docker tag neo-networker-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker tag neo-networker-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      env:
        VITE_API_URL: https://api.leeeed.com/api
      run: |
        cd frontend
        npm run build
    
    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://neo-networker-frontend-1758372954 --delete
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id E2EFFEJ56BYWCG --paths "/*"
    
    - name: Deploy backend to App Runner
      run: |
        # Get the service ARN
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='neo-networker-backend-final'].ServiceArn" --output text)
        
        # Start deployment
        aws apprunner start-deployment --service-arn $SERVICE_ARN
    
    - name: Run database migrations (Production)
      run: |
        echo "‚ö†Ô∏è  Production database migrations should be run manually for safety"
        echo "üìã Run these commands on your production database:"
        echo "  psql -h neo-networker-db-v2.c0d2k4qwgenr.us-east-1.rds.amazonaws.com -U postgres -d postgres -f production_migration.sql"
        echo "  psql -h neo-networker-db-v2.c0d2k4qwgenr.us-east-1.rds.amazonaws.com -U postgres -d postgres -f google_scopes_migration.sql"
        echo ""
        echo "üîß Or use the manual migration script:"
        echo "  ./deploy.sh prod migrations"
    
    - name: Run production tests
      run: |
        # Add production-specific tests here
        echo "Running production tests..."
        # Example: smoke tests, health checks, etc.
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Successfully deployed to production environment"
        echo "üåê Production Frontend: https://d2fq8k5py78ii.cloudfront.net"
        echo "üîß Production Backend: https://dkdrn34xpx.us-east-1.awsapprunner.com"
        echo ""
        echo "‚ö†Ô∏è  Remember to run database migrations manually if needed!"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed"
        echo "üö® Check logs and consider rollback if necessary"
        exit 1
